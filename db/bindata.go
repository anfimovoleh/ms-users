// Code generated by go-bindata.
// sources:
// migrations/001_users.sql
// migrations/002_tokens.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations001_usersSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcf\xb1\x4e\x86\x30\x14\xc5\xf1\xfd\x3e\xc5\x19\x3f\xa2\x24\xc6\xc8\xc4\x54\xa4\x31\x8d\x15\xb0\xd2\x81\x89\x54\xa9\xd2\x44\x28\x69\x51\x5e\xdf\xb0\x08\x8b\xce\xbf\x7f\x6e\xee\x49\x53\x5c\x4d\xee\x23\x98\xd5\x42\x2f\x44\xf7\x8a\xb3\x96\xa3\x65\x85\xe4\xf8\x8a\x36\xc4\x0b\x01\x6e\x40\x21\x1e\x5e\xb8\x12\x4c\xa2\xaa\x5b\x54\x5a\x4a\xa0\x51\xe2\x89\xa9\x0e\x8f\xbc\xbb\x26\x60\x36\x93\xc5\xb7\x09\x6f\xa3\x09\x97\xdb\x2c\x4b\x7e\xd3\x5d\xed\x64\xdc\xe7\x89\xef\x0e\x86\xae\xc4\xb3\xe6\x7b\x35\x98\xd5\xf6\xfe\xbd\x7f\x75\x61\x1d\xff\x3e\xb6\x98\x18\x37\x1f\x86\x7f\x8a\xd1\xcf\xc7\x37\xd9\xcd\xa1\x94\xe4\x44\xe7\xdd\xa5\xdf\x66\xa2\x52\xd5\xcd\x79\x77\xfe\x13\x00\x00\xff\xff\x2d\x4a\x69\x92\x1b\x01\x00\x00")

func migrations001_usersSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations001_usersSql,
		"migrations/001_users.sql",
	)
}

func migrations001_usersSql() (*asset, error) {
	bytes, err := migrations001_usersSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/001_users.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations002_tokensSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xc1\x4a\xc3\x40\x14\x45\xf7\xef\x2b\xee\x72\x06\xed\x42\x57\x42\x57\xb1\x7d\x95\xa2\xb6\x65\xac\x8b\xae\xc2\x60\x1f\xcd\xa0\x99\x09\x33\x2f\x06\xfc\x7a\x49\xe2\xc2\xee\x2e\x87\xcb\xe1\x2c\x16\xb8\x69\xc3\x25\x7b\x15\xbc\x77\x44\x2b\xc7\xd5\x91\x71\xac\x1e\x5f\x18\x9a\x3e\x25\x16\x43\x98\x17\xbe\x7d\xfe\x68\x7c\x36\x77\xf7\x0f\x16\x07\xb7\x7d\xad\xdc\x09\xcf\x7c\xc2\x2d\x01\x7d\x91\x5c\x87\x33\x42\x54\xb9\x48\x1e\xd1\x97\x2f\x5a\x17\x89\x5a\x7b\x85\x86\x56\x8a\xfa\xb6\xc3\x10\xb4\x49\xfd\x4c\xf0\x93\xa2\x8c\xdf\xcd\xde\xf1\xf6\x69\x37\xe9\xcc\x9f\xcb\xc2\xf1\x86\x1d\xef\x56\xfc\x36\xf9\x8b\x09\x67\x4b\x76\x49\xf4\xbf\x7b\x9d\x86\x48\xb4\x76\xfb\xc3\x55\xf7\xf2\x37\x00\x00\xff\xff\x98\x9c\x9d\x31\xdc\x00\x00\x00")

func migrations002_tokensSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations002_tokensSql,
		"migrations/002_tokens.sql",
	)
}

func migrations002_tokensSql() (*asset, error) {
	bytes, err := migrations002_tokensSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/002_tokens.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/001_users.sql":  migrations001_usersSql,
	"migrations/002_tokens.sql": migrations002_tokensSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"001_users.sql":  &bintree{migrations001_usersSql, map[string]*bintree{}},
		"002_tokens.sql": &bintree{migrations002_tokensSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
